---
title: What even are GADTs?
summary: A quick, beginner-level overview of what Haskell's Generalized Algebraic Data Types are good for.
tags: haskell, static-types, beginner
---

> ***note: This post assumes some casual familiarity with Haskell, especially with
> (plain ol') [Algebraic Data Types].***

[Algebraic Data Types]: https://en.wikipedia.org/wiki/Algebraic_data_type

## a common GHC extension

stuff

## the goal

Let's say we're working on an application that queries some live data source, and we want to:

a. model queries as data
b. run those queries in a type-safe manner

Ideally, we'd end up with a function that more or less works like this:

```haskell
runQuery :: Query a -> IO a
```

In other words, it might take a `Query [Transaction]` and return an `IO [Transaction]`, or it
could take a `Query (Maybe User)` and return `IO (Maybe User)`, etc. You get the picture.

## a first try

Let's try writing a data type to represent queries:

```
data Query' a =
    SelectUserById' Int
  | SelectTransactionsForUser' Int 
```

There's something really off about this. We have a type parameter `a`, but it's
not used in any of the constructors. So by taking advantage of the Haskell
compiler's trusting nature, we can return a `Query' a` for whatever `a` we want.

That seems weird, but it does give us the ability to do this:

```haskell
selectUser' :: Int -> Query' (Maybe User)
selectUser' = SelectUserById'

selectTransactions' :: Int -> Query' [Transaction]
selectTransactions' = SelectTransactionsForUser'
```


With these helper functions, we technically have everything we need in order to
write `runQuery`, but nothing's stopping someone from writing up some garbage
like this:

```haskell
wtfQuery :: Query' (Either Unicorn Void)
wtfQuery = SelectTransactionsForUser' 666
```

## that kinda sucks

With the above `Query' a` type, any relation between the type parameter `a` and
the actual result is purely a mirage. Why even have types at all if they're just
smoke and mirrors?

## use a dang GADT

This is exactly the situation that GADTs ([Generalized Algebraic Data Types][gadts]) are made for. 

```haskell
-- requires {-# LANGUAGE GADTs #-}

data Query a where {{1}}
  SelectUserById            :: Int  -> Query User {{2}}
  SelectTransactionsForUser :: User -> Query [Transaction]
```

Let's start by comparing `Query` (the GADT version) to the bogus `Query'`
definition from the beginning of this post. First of all, there's the `where`
keyword ({{1}}), which is GADT-specific syntax that replaces the `=` in a normal
ADT definition.

Second, and much more importantly, the constructors are fully annotated with
their types. If you look at {{2}}, you can see that `SelectUserById` can only
ever return a `Query User`.

The only other constructor returns `Query [Transaction]`, so the only possible
forms of `Query a` are:

* `Query User`
* `Query [Transaction]`

We don't have to worry about absurd cases like `Query (Either Unicorn Void)`
because there's simply no way to construct them. We don't need to play weird
"hide the constructor" games, because these constructors are thoroughly safe.

## tying it together

With the new `Query` type defined, we can now use it to write the `query`
function:

```haskell
query :: Query a -> IO a
query (SelectUserById uid) = getUser uid {{1}}
query (SelectTransactionsForUser user) = getTransactions user {{2}}
```

The type `Query a -> IO a` looks very general, but it really expands to just two
potential cases:

* `Query User -> IO User` ({{1}})
* `Query [Transaction] -> IO [Transaction]` ({{2}})

If you try to return anything but `IO User` from {{1}}, you'll get a type error.
Same if you try to return anything but `IO [Transaction]` from {{2}}.

What's interesting is that those restrictions are ultimately determined by the
`Query` data type. Functions are great, but anything we can represent in pure
data is even better. When you use this pattern, it puts that much more emphasis
on the data model, and lets that drive your function implementations.

[gadts]: https://en.wikipedia.org/wiki/Generalized_algebraic_data_type
